# Generated by Django 4.2.20 on 2025-05-22 21:37

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.gis.db.models.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import djgeojson.fields
import phonenumber_field.modelfields
import simple_history.models
import tinymce.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='EmployeeUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('civilite', models.CharField(blank=True, choices=[('Monsieur', 'Monsieur'), ('Madame', 'Madame'), ('Docteur', 'Docteur'), ('Professeur', 'Professeur'), ('Excellence', 'Excellence'), ('Honorable', 'Honorable')], max_length=10, null=True)),
                ('contact', models.CharField(blank=True, max_length=100, null=True)),
                ('email', models.CharField(blank=True, max_length=100, null=True)),
                ('fonction', models.CharField(blank=True, max_length=255, null=True)),
                ('roleemployee', models.CharField(choices=[('National', 'National'), ('Regional', 'Régional'), ('DistrictSanitaire', 'District Sanitaire'), ('CentreAntirabique', 'Centre Antirabique')], default='CentreAntirabique', max_length=20)),
            ],
            options={
                'verbose_name': 'Employé',
                'verbose_name_plural': 'Employés',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='CentreAntirabique',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('type', models.CharField(blank=True, max_length=100, null=True)),
                ('geom', djgeojson.fields.PointField(blank=True, null=True)),
                ('upstream', models.CharField(blank=True, max_length=255, null=True)),
                ('date_modified', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('source_url', models.URLField(blank=True, max_length=500, null=True)),
                ('completeness', models.CharField(blank=True, max_length=100, null=True)),
                ('uuid', models.UUIDField(blank=True, null=True, unique=True)),
                ('source', models.CharField(blank=True, max_length=100, null=True)),
                ('what3words', models.CharField(blank=True, max_length=255, null=True)),
                ('version', models.IntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Commune',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, db_index=True, max_length=500, null=True, unique=True)),
                ('type', models.CharField(blank=True, choices=[('Commune', 'Commune'), ('Village', 'Village'), ('Ville', 'Ville'), ('Quartier', 'Quartier')], max_length=100, null=True)),
                ('population', models.CharField(blank=True, max_length=100, null=True)),
                ('is_in', models.CharField(blank=True, max_length=255, null=True)),
                ('geom', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326)),
            ],
        ),
        migrations.CreateModel(
            name='DistrictSanitaire',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(blank=True, db_index=True, max_length=100, null=True, unique=True)),
                ('geom', djgeojson.fields.PointField(blank=True, null=True)),
                ('geojson', models.JSONField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Epidemie',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=100)),
                ('description', tinymce.models.HTMLField(blank=True, null=True)),
                ('date_debut', models.DateField(blank=True, null=True)),
                ('date_fin', models.DateField(blank=True, null=True)),
                ('thumbnails', models.ImageField(blank=True, null=True, upload_to='epidemie/thumbnails')),
            ],
            options={
                'permissions': (('voir_epidemie', 'peut voir epidemie'),),
            },
        ),
        migrations.CreateModel(
            name='LotVaccin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('numero_lot', models.CharField(db_index=True, max_length=100, unique=True)),
                ('date_fabrication', models.DateField(blank=True, db_index=True, null=True)),
                ('date_expiration', models.DateField(blank=True, db_index=True, null=True)),
                ('quantite_initiale', models.PositiveIntegerField()),
                ('quantite_disponible', models.PositiveIntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('centre', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lots_centre', to='rage.centreantirabique')),
                ('created_by', models.ForeignKey(blank=True, help_text='Ajouté par', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code_patient', models.CharField(blank=True, db_index=True, editable=False, max_length=225, unique=True)),
                ('mpi_upi', models.UUIDField(blank=True, db_index=True, null=True, unique=True)),
                ('nom', models.CharField(db_index=True, max_length=225)),
                ('prenoms', models.CharField(db_index=True, max_length=225)),
                ('contact', phonenumber_field.modelfields.PhoneNumberField(blank=True, db_index=True, max_length=128, null=True, region='CI')),
                ('date_naissance', models.DateField(db_index=True)),
                ('sexe', models.CharField(choices=[('Masculin', 'Masculin'), ('Feminin', 'Féminin')], max_length=10)),
                ('num_cmu', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('cni_num', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('cni_nni', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('secteur_activite', models.CharField(blank=True, max_length=200, null=True)),
                ('niveau_etude', models.CharField(blank=True, choices=[('Non scolarisé', 'Non scolarisé'), ('Préscolaire', 'Préscolaire'), ('Primaire', 'Primaire'), ('Secondaire', 'Secondaire'), ('Supérieur', 'Supérieur')], max_length=500, null=True)),
                ('quartier', models.CharField(blank=True, max_length=255, null=True)),
                ('village', models.CharField(blank=True, max_length=255, null=True)),
                ('poids', models.PositiveIntegerField(blank=True, help_text='Poids du patient (1 à 250 kg)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(250)])),
                ('proprietaire_animal', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, default='Non', max_length=10, null=True)),
                ('typeanimal', models.CharField(blank=True, choices=[('Singe', 'Singe'), ('Chien', 'Chien'), ('Chat', 'Chat'), ('Autre', 'Autre')], max_length=255, null=True)),
                ('autretypeanimal', models.CharField(blank=True, max_length=255, null=True)),
                ('patient_mineur', models.BooleanField(default=False)),
                ('accompagnateur', models.CharField(blank=True, max_length=255, null=True)),
                ('accompagnateurcontact', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region='CI')),
                ('accompagnateur_adresse', models.CharField(blank=True, max_length=255, null=True)),
                ('accompagnateur_nature', models.CharField(blank=True, choices=[('Pere', 'Père'), ('Mere', 'Mère'), ('Oncle', 'Oncle'), ('Tante', 'Tante'), ('Frere', 'Frère'), ('Soeur', 'Soeur'), ('Cousin', 'Cousin'), ('Cousine', 'Cousine'), ('Connaissance du quartier', 'Connaissance du quartier'), ('Voisin du quartier', 'Voisin du quartier'), ('Propriétaire animal', 'Propriétaire animal')], max_length=255, null=True)),
                ('accompagnateur_niveau_etude', models.CharField(blank=True, choices=[('Non scolarisé', 'Non scolarisé'), ('Préscolaire', 'Préscolaire'), ('Primaire', 'Primaire'), ('Secondaire', 'Secondaire'), ('Supérieur', 'Supérieur')], max_length=255, null=True)),
                ('status', models.CharField(blank=True, choices=[('Admis', 'Admis'), ('Sorti', 'Sorti'), ('Transféré', 'Transféré'), ('Décédé', 'Décédé'), ('Sous observation', 'Sous observation'), ('Sous traitement', 'Sous traitement'), ('Chirurgie programmée', 'Chirurgie programmée'), ('En chirurgie', 'En chirurgie'), ('Récupération post-opératoire', 'Récupération post-opératoire'), ('USI', 'Unité de soins intensifs (USI)'), ('Urgence', 'Urgence'), ('Consultation externe', 'Consultation externe'), ('Réhabilitation', 'Réhabilitation'), ('En attente de diagnostic', 'En attente de diagnostic'), ('Traitement en cours', 'Traitement en cours'), ('Suivi programmé', 'Suivi programmé'), ('Consultation', 'Consultation'), ('Sortie en attente', 'Sortie en attente'), ('Isolement', 'Isolement'), ('Ambulantoire', 'Ambulantoire'), ('Aucun', 'Aucun')], default='Aucun', max_length=100, null=True)),
                ('gueris', models.BooleanField(default=False)),
                ('decede', models.BooleanField(default=False)),
                ('cause_deces', models.TextField(blank=True, null=True)),
                ('date_deces', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('centre_ar', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='rage.centreantirabique')),
                ('commune', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='rage.commune')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('district', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='rage.districtsanitaire')),
            ],
            options={
                'ordering': ['-created_at'],
                'permissions': (('voir_patient', 'Peut voir patient'),),
            },
        ),
        migrations.CreateModel(
            name='PolesRegionaux',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='PostExposition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_exposition', models.DateField(db_index=True)),
                ('lieu_exposition', models.CharField(blank=True, db_index=True, max_length=255, null=True)),
                ('exposition_quartier', models.CharField(blank=True, max_length=255, null=True)),
                ('circonstance', models.CharField(blank=True, choices=[('Attaque provoquée', 'Attaque provoquée'), ('Agression', 'Agression'), ('Contact patient suspect/positif de rage ', 'Contact patient suspect/positif de rage')], max_length=255, null=True)),
                ('attaque_provoquee', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], max_length=10, null=True)),
                ('agression', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], max_length=10, null=True)),
                ('attaque_collective', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], max_length=10)),
                ('professionnel', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], max_length=10)),
                ('type_professionnel', models.CharField(blank=True, choices=[('Manipulation / Soins', 'Manipulation / Soins'), ('Laboratoire', 'Laboratoire')], max_length=50, null=True)),
                ('morsure', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10)),
                ('griffure', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10)),
                ('lechage_saine', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10, null=True)),
                ('lechage_lesee', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10)),
                ('contactanimalpositif', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10)),
                ('contactpatientpositif', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10)),
                ('autre', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10)),
                ('autre_nature_exposition', models.CharField(blank=True, db_index=True, max_length=10, null=True)),
                ('tete_cou', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10)),
                ('preciser_tetecou', models.JSONField(blank=True, null=True)),
                ('membre_superieur', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10)),
                ('preciser_membre_sup', models.JSONField(blank=True, null=True)),
                ('tronc', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10)),
                ('preciser_tronc', models.JSONField(blank=True, null=True)),
                ('organes_genitaux_externes', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10)),
                ('membre_inferieur', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10)),
                ('preciser_membre_inf', models.JSONField(blank=True, null=True)),
                ('saignement_immediat', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10)),
                ('vetements_presents', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10)),
                ('dechires', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10, null=True)),
                ('siege_exposition', models.TextField(blank=True, null=True)),
                ('vetements_dechires', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10, null=True)),
                ('nbrlesions', models.CharField(blank=True, choices=[('1', '1'), ('2', '2'), ('3', '3'), ('4', '4'), ('5', '5'), ('6', '6'), ('7', '7'), ('8', '8'), ('9', '9'), ('10', '10'), ('11-15', '11-15'), ('16-20', '16-20'), ('21 et plus', '21 et plus ')], max_length=300, null=True)),
                ('espece', models.CharField(blank=True, choices=[('Chien', 'Chien'), ('Chat', 'Chat'), ('Singe', 'Singe'), ('Chauve-souris', 'Chauve-souris'), ('Autre', 'Autre')], max_length=50, null=True)),
                ('autre_animal', models.CharField(blank=True, max_length=255, null=True)),
                ('domestic', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10, null=True)),
                ('connais_proprio', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10, null=True)),
                ('nom_proprietaire', models.CharField(blank=True, max_length=255, null=True)),
                ('contact_proprietaire', models.CharField(blank=True, max_length=255, null=True)),
                ('info_proprietaire', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], max_length=50, null=True)),
                ('retour_info_proprietaire', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], max_length=50, null=True)),
                ('avis', models.BooleanField(default=False)),
                ('convocation', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10, null=True)),
                ('prophylaxie', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10, null=True)),
                ('correctement_vaccine', models.CharField(blank=True, choices=[('Animal non vacciné', 'Animal non vacciné'), ('Statut vaccinal Inconnu', 'Statut vaccinal Inconnu'), ('Non à jour', 'Non à jour'), ('Oui', 'Correctement vacciné')], db_index=True, max_length=50, null=True)),
                ('non_vaccine', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10, null=True)),
                ('nonajours', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10, null=True)),
                ('vacinconnu', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10, null=True)),
                ('carnet_Vaccin', models.FileField(blank=True, null=True, upload_to='carnets/')),
                ('connu', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10, null=True)),
                ('disponible', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10, null=True)),
                ('errant', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10, null=True)),
                ('disparu', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10, null=True)),
                ('mort', models.CharField(blank=True, choices=[('Carcasse disponible', 'Carcasse disponible'), ('Carcasse non disponible', 'Carcasse non disponible'), ('Non', 'Non')], db_index=True, max_length=30, null=True)),
                ('abatu', models.CharField(blank=True, choices=[('Carcasse disponible', 'Carcasse disponible'), ('Carcasse non disponible', 'Carcasse non disponible'), ('Non', 'Non')], db_index=True, max_length=30, null=True)),
                ('autre_statut', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10)),
                ('autre_statut_precis', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('date_derniere_vaccination', models.DateField(blank=True, null=True)),
                ('gravite_oms', models.CharField(blank=True, choices=[('I', 'I'), ('II', 'II'), ('III', 'III')], max_length=10, null=True)),
                ('surveillance_veterinaire', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10, null=True)),
                ('certificat', models.CharField(blank=True, max_length=50, null=True)),
                ('piece_jointe', models.FileField(blank=True, null=True, upload_to='certifiatVaccin')),
                ('date_etablissement', models.DateField(blank=True, null=True)),
                ('Date_depot_car', models.DateField(blank=True, null=True)),
                ('Decision_de_poursuite_tar', models.CharField(blank=True, max_length=50, null=True)),
                ('Decision_d_arrete_tar', models.CharField(blank=True, max_length=50, null=True)),
                ('prelevement_animal', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10, null=True)),
                ('diagnostic_laboratoire', models.CharField(blank=True, choices=[('Positif', 'Positif'), ('Negatif', 'Négatif')], max_length=50, null=True)),
                ('date_diagnostic', models.DateField(blank=True, null=True)),
                ('antecedents_medicaux', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10)),
                ('details_antecedents', models.JSONField(blank=True, null=True)),
                ('probleme_coagulation', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10)),
                ('details_problemes', models.JSONField(blank=True, null=True)),
                ('immunodepression', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10)),
                ('details_immo', models.JSONField(blank=True, null=True)),
                ('grossesse', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10, null=True)),
                ('details_grosesse', models.CharField(blank=True, choices=[('1', 'Semaine 1'), ('2', 'Semaine 2'), ('3', 'Semaine 3'), ('4', 'Semaine 4'), ('5', 'Semaine 5'), ('6', 'Semaine 6'), ('7', 'Semaine 7'), ('8', 'Semaine 8'), ('9', 'Semaine 9'), ('10', 'Semaine 10'), ('11', 'Semaine 11'), ('12', 'Semaine 12'), ('13', 'Semaine 13'), ('14', 'Semaine 14'), ('15', 'Semaine 15'), ('16', 'Semaine 16'), ('17', 'Semaine 17'), ('18', 'Semaine 18'), ('19', 'Semaine 19'), ('20', 'Semaine 20'), ('21', 'Semaine 21'), ('22', 'Semaine 22'), ('23', 'Semaine 23'), ('24', 'Semaine 24'), ('25', 'Semaine 25'), ('26', 'Semaine 26'), ('27', 'Semaine 27'), ('28', 'Semaine 28'), ('29', 'Semaine 29'), ('30', 'Semaine 30'), ('31', 'Semaine 31'), ('32', 'Semaine 32'), ('33', 'Semaine 33'), ('34', 'Semaine 34'), ('35', 'Semaine 35'), ('36', 'Semaine 36'), ('37', 'Semaine 37'), ('38', 'Semaine 38'), ('39', 'Semaine 39'), ('40', 'Semaine 40'), ('41', 'Semaine 41')], db_index=True, max_length=10, null=True)),
                ('allergies', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10)),
                ('details_allergies', models.JSONField(blank=True, null=True)),
                ('traitements_en_cours', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10)),
                ('details_traitements', models.TextField(blank=True, null=True)),
                ('vat_dernier_injection', models.DateField(blank=True, null=True)),
                ('vat_rappel', models.DateField(blank=True, null=True)),
                ('vat_lot', models.CharField(blank=True, max_length=255, null=True)),
                ('vaccin_antirabique', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10, null=True)),
                ('carnet_vaccinal', models.FileField(blank=True, null=True, upload_to='carnets/')),
                ('carnet_vaccinal_verso', models.FileField(blank=True, null=True, upload_to='carnets/')),
                ('lavage_plaies', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10, null=True)),
                ('desinfection_plaies', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10, null=True)),
                ('delai_apres_exposition', models.CharField(blank=True, choices=[('0', "moin d'une heure"), ('1-2', '1 -2 heure'), ('3-4', '3-4 heure'), ('5-6', '5-6 heure')], max_length=50, null=True)),
                ('delai_apres_desinfection', models.CharField(blank=True, choices=[('0', "moin d'une heure"), ('1-2', '1 -2 heure'), ('3-4', '3-4 heure'), ('5-6', '5-6 heure')], max_length=50, null=True)),
                ('produits_utilises', models.CharField(blank=True, max_length=50, null=True)),
                ('sutures', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10, null=True)),
                ('serum_antitetanique', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10, null=True)),
                ('antibiotiques', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10, null=True)),
                ('details_antibiotiques', models.TextField(blank=True, null=True)),
                ('delai_traitement', models.TextField(blank=True, null=True)),
                ('immunoglobulines', models.TextField(blank=True, null=True)),
                ('details_vaccination', models.TextField(blank=True, null=True)),
                ('serologie', models.BooleanField(default=False)),
                ('details_serologie', models.TextField(blank=True, null=True)),
                ('issue', models.CharField(blank=True, choices=[('Perdu de vue', 'Perdu de vue'), ('Arrêté', 'Arrêté'), ('Terminé', 'Terminé')], max_length=50, null=True)),
                ('observance', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10, null=True)),
                ('evolution_patient', models.CharField(blank=True, choices=[('Vivant', 'Vivant'), ('Décédé', 'Décédé'), ('Non précisé', 'Non précisé')], max_length=50, null=True)),
                ('cause_deces', models.TextField(blank=True, null=True)),
                ('date_deces', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('temps_saisie', models.PositiveIntegerField(blank=True, help_text='Temps de saisie du formulaire (en secondes)', null=True)),
                ('client', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='patientpep', to='rage.patient')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('exposition_commune', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='rage.commune')),
            ],
        ),
        migrations.CreateModel(
            name='Preexposition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('codeexpo', models.CharField(blank=True, db_index=True, max_length=255, null=True, unique=True)),
                ('voyage', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, default='Non', max_length=3)),
                ('mise_a_jour', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, default='Non', max_length=3)),
                ('protection_rage', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, default='Non', max_length=3)),
                ('chien_voisin', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, default='Non', max_length=3)),
                ('chiens_errants', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, default='Non', max_length=3)),
                ('autre', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, default='Non', max_length=3)),
                ('autre_motif', models.CharField(blank=True, db_index=True, null=True)),
                ('tele', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, default='Non', max_length=3)),
                ('radio', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, default='Non', max_length=3)),
                ('sensibilisation', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], default='Non', max_length=3)),
                ('proche', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], default='Non', max_length=3)),
                ('presse', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], default='Non', max_length=3)),
                ('passage_car', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], default='Non', max_length=3)),
                ('diff_canal', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], default='Non', max_length=3)),
                ('canal_infos', models.TextField(blank=True, null=True)),
                ('aime_animaux', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], default='Non', max_length=3)),
                ('type_animal_aime', models.CharField(blank=True, choices=[('Chien', 'Chien'), ('Chat', 'Chat'), ('Singe', 'Singe'), ('Autre', 'Autre')], max_length=255, null=True)),
                ('conduite_animal_mordeur', models.CharField(blank=True, choices=[('Abattage', 'Abattage'), ('Surveillance vétérinaire', 'Surveillance vétérinaire'), ('Ne rien faire', 'Ne rien faire'), ('Autre', 'Autre')], max_length=255, null=True)),
                ('connait_protocole_var', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], default='Non', max_length=3)),
                ('dernier_var_animal_type', models.CharField(blank=True, max_length=255, null=True)),
                ('dernier_var_animal_date', models.DateField(blank=True, null=True)),
                ('mesures_elimination_rage', models.CharField(blank=True, null=True)),
                ('appreciation_cout_var', models.CharField(blank=True, choices=[('Elevé', 'Elevé'), ('Acceptable', 'Acceptable'), ('Pas à la portée de tous', 'Pas à la portée de tous'), ('Moins couteux', 'Moins couteux')], max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('fin_protocole', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], default='Non', max_length=3, null=True)),
                ('client', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='rage.patient')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='employeer', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PreleveMode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ProtocoleVaccination',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(blank=True, help_text='Nom du Protocole', max_length=255, null=True)),
                ('duree', models.IntegerField(blank=True, help_text='Durée du protocole en jours', null=True)),
                ('intervale_visite1_2', models.CharField(blank=True, help_text='Intervalle entre la premiere visite et la seconde visite (ex: 3Jours)', max_length=255, null=True)),
                ('intervale_visite2_3', models.CharField(blank=True, help_text='Intervalle entre la seconde visite et la troisiemme visite (ex: 4Jours)', max_length=255, null=True)),
                ('intervale_visite3_4', models.CharField(blank=True, help_text='Intervalle entre la troisiemme visite et la quatrieme visite (ex: 7Jours)', max_length=255, null=True)),
                ('intervale_visite4_5', models.CharField(blank=True, help_text='Intervalle entre la quatrieme visite et la cinquieme  visite (ex: 14Jours)', max_length=255, null=True)),
                ('nombre_visite', models.IntegerField(blank=True, help_text='Le nombre maximal de visite ', null=True)),
                ('nombre_doses', models.IntegerField(blank=True, help_text='Nombre total de doses', null=True)),
                ('nbr_dose_par_rdv', models.IntegerField(blank=True, help_text='Nombre de dose par', null=True)),
                ('volume_doses', models.DecimalField(blank=True, decimal_places=2, help_text='le volume par dose en ml', max_digits=5, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Protocole de Vaccination',
                'verbose_name_plural': 'Protocoles de Vaccination',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Symptom',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Technique',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=155, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='TypeProtocole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom_protocole', models.CharField(max_length=255)),
                ('nombre_dose', models.IntegerField()),
                ('prix', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='TypeServiceSanitaire',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(blank=True, max_length=500, null=True)),
                ('acronyme', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Vaccination',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_prevue', models.DateField()),
                ('date_effective', models.DateTimeField(blank=True, null=True)),
                ('dose_ml', models.FloatField()),
                ('dose_numero', models.IntegerField(help_text='Numéro de la dose dans le protocole')),
                ('nombre_dose', models.IntegerField()),
                ('voie_injection', models.CharField(choices=[('ID', 'Intradermique')], max_length=5)),
                ('lieu', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('lot', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='rage.lotvaccin')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rage.patient')),
                ('protocole', models.ForeignKey(max_length=255, on_delete=django.db.models.deletion.CASCADE, to='rage.protocolevaccination')),
            ],
        ),
        migrations.CreateModel(
            name='WhatsAppMessageLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sid', models.CharField(help_text='Twilio Message SID', max_length=64, unique=True)),
                ('to', models.CharField(help_text='Numéro destinataire', max_length=32)),
                ('status', models.CharField(help_text='Statut du message (queued, sent, delivered, failed…)', max_length=32)),
                ('body', models.TextField(help_text='Contenu du message')),
                ('date_sent', models.DateTimeField(auto_now_add=True)),
                ('vaccination', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='whatsapp_logs', to='rage.vaccination')),
            ],
            options={
                'verbose_name': 'Log message WhatsApp',
                'verbose_name_plural': 'Logs messages WhatsApp',
                'ordering': ['-date_sent'],
            },
        ),
        migrations.CreateModel(
            name='Vaccins',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(db_index=True, help_text='Nom du vaccin', max_length=255)),
                ('nbr_dose', models.PositiveIntegerField(blank=True, db_index=True, help_text='Nombre de dose recquis', null=True)),
                ('unite', models.CharField(choices=[('ml', 'Millilitres'), ('dose', 'Doses'), ('flacon', 'Flacons')], help_text='Unité de mesure', max_length=10)),
                ('prix', models.PositiveIntegerField(blank=True, help_text='Quantité en stock', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='Ajouté par', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Vaccin',
                'verbose_name_plural': 'Vaccins',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='vaccination',
            name='vaccin',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='rage.vaccins'),
        ),
        migrations.CreateModel(
            name='ServiceSanitaire',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(blank=True, max_length=100, null=True)),
                ('geom', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326)),
                ('upstream', models.CharField(blank=True, max_length=255, null=True)),
                ('date_modified', models.DateTimeField(blank=True, null=True)),
                ('source_url', models.URLField(blank=True, max_length=500, null=True)),
                ('completeness', models.CharField(blank=True, max_length=100, null=True)),
                ('uuid', models.UUIDField(blank=True, null=True)),
                ('source', models.CharField(blank=True, max_length=100, null=True)),
                ('what3words', models.CharField(blank=True, max_length=255, null=True)),
                ('version', models.IntegerField(blank=True, null=True)),
                ('district', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='rage.districtsanitaire')),
                ('type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='rage.typeservicesanitaire')),
            ],
        ),
        migrations.CreateModel(
            name='RendezVousVaccination',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_rendez_vous', models.DateField(db_index=True, help_text='Date prévue du rendez-vous')),
                ('dose_numero', models.IntegerField(db_index=True, help_text='Numéro de la dose dans le protocole')),
                ('ordre_rdv', models.IntegerField(blank=True, db_index=True, help_text='Numéro d’ordre du RDV pour ce patient', null=True)),
                ('est_effectue', models.BooleanField(db_index=True, default=False, help_text='Le vaccin a-t-il été administré ?')),
                ('statut_rdv', models.CharField(blank=True, choices=[('Passé', 'Passé'), ("Aujourd'hui", "Aujourd'hui"), ('À venir', 'À venir')], max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rendez_vous_vaccination', to='rage.patient')),
                ('postexposition', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='rendez_vous_post_expo', to='rage.postexposition')),
                ('preexposition', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='rendez_vous_pre_expo', to='rage.preexposition')),
                ('protocole', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='protocole_rendez_vous', to='rage.protocolevaccination')),
            ],
            options={
                'verbose_name': 'Rendez-vous Vaccination',
                'verbose_name_plural': 'Rendez-vous Vaccinations',
                'ordering': ['date_rendez_vous'],
            },
        ),
        migrations.CreateModel(
            name='RageHumaineNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_notification', models.DateField(verbose_name='Date de la notification')),
                ('hopital', models.CharField(max_length=100, verbose_name='Hôpital')),
                ('service', models.CharField(max_length=100, verbose_name='Service')),
                ('agent_declarant', models.CharField(max_length=100, verbose_name='Agent déclarant')),
                ('adresse', models.CharField(max_length=200, verbose_name='Adresse')),
                ('telephone', models.CharField(max_length=20, verbose_name='Téléphone')),
                ('cel', models.CharField(max_length=20, verbose_name='Cel')),
                ('email', models.EmailField(max_length=254, verbose_name='E-mail')),
                ('date_exposition', models.DateField(verbose_name='Date de l’exposition')),
                ('pays', models.CharField(max_length=100, verbose_name='Pays')),
                ('nature_exposition', models.CharField(choices=[('Morsure', 'Morsure'), ('Griffure', 'Griffure'), ('Léchage', 'Léchage'), ('Simple manipulation', 'Simple manipulation'), ('Autres', 'Autres')], max_length=20, verbose_name='Nature de l’exposition')),
                ('autre_nature_exposition', models.CharField(max_length=120, verbose_name='Autres nature')),
                ('siege_lesion', models.CharField(choices=[('Tête et cou', 'Tête et cou'), ('Membre supérieur', 'Membre supérieur'), ('Tronc', 'Tronc'), ('OGE', 'OGE'), ('Membre inférieur', 'Membre inférieur')], max_length=20, verbose_name='Siège de la lésion')),
                ('precision_siege', models.CharField(blank=True, max_length=100, null=True, verbose_name='Précision siège')),
                ('categorie_lesion', models.CharField(choices=[('I', 'I'), ('II', 'II'), ('III', 'III')], max_length=10, verbose_name='Catégorie de la lésion')),
                ('animal_responsable', models.CharField(choices=[('Chien', 'Chien'), ('Chat', 'Chat'), ('Autre', 'Autre')], max_length=10, verbose_name='Animal responsable')),
                ('precis_animal_responsable', models.CharField(blank=True, max_length=100, null=True, verbose_name='Préciser animal responsable')),
                ('animal_suspect_rage', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non'), ('Ne sait pas', 'Ne sait pas')], max_length=50, verbose_name='Animal suspect de rage')),
                ('devenir_animal', models.CharField(choices=[('Vivant', 'Vivant'), ('Errant', 'Errant'), ('Mort', 'Mort'), ('Abattu', 'Abattu'), ('Disparu', 'Disparu')], max_length=10, verbose_name='Devenir de l’animal')),
                ('prelevement_animal', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], max_length=10)),
                ('resultat_analyse', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], max_length=10, null=True, verbose_name='Résultat analyse')),
                ('labo_pathologie_animale', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], max_length=10)),
                ('autres_labos', models.CharField(blank=True, max_length=100, null=True, verbose_name='Autres laboratoires')),
                ('soins_locaux', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], max_length=10)),
                ('desinfection', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], max_length=10)),
                ('produit_desinfection', models.CharField(blank=True, max_length=100, null=True, verbose_name='Produit utilisé pour la désinfection')),
                ('vaccination_antirabique', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], max_length=10)),
                ('date_debut_vaccination', models.DateField(blank=True, null=True, verbose_name='Date de début de la vaccination antirabique')),
                ('protocole_vaccination', models.CharField(blank=True, choices=[('Essen', 'Essen'), ('Zagreb', 'Zagreb'), ('ID', 'ID')], max_length=10, null=True, verbose_name='Protocole utilisé')),
                ('date_premiers_signes', models.DateField(blank=True, null=True, verbose_name='Date des premiers signes')),
                ('trouble_comportement', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], max_length=10)),
                ('agitation', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], max_length=10)),
                ('hospitalisation', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], max_length=10)),
                ('date_hospitalisation', models.DateField(blank=True, null=True, verbose_name='Date d’hospitalisation')),
                ('lieu_hospitalisation', models.CharField(max_length=50)),
                ('evolution', models.CharField(blank=True, choices=[('Encore malade', 'Encore malade'), ('Décédé(e)', 'Décédé(e)')], max_length=20, null=True, verbose_name='Évolution')),
                ('date_deces', models.DateField(blank=True, null=True, verbose_name='Date de décès')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('client', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notifications_rage', to='rage.patient')),
                ('exposition', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='rage.postexposition')),
                ('lieu_exposition', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='rage.commune')),
                ('signature_agent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='protocolevaccination',
            name='technique',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='rage.technique'),
        ),
        migrations.AddField(
            model_name='protocolevaccination',
            name='type',
            field=models.ForeignKey(blank=True, help_text='Type de protocole', null=True, on_delete=django.db.models.deletion.CASCADE, to='rage.typeprotocole'),
        ),
        migrations.AddField(
            model_name='preexposition',
            name='protocole_vaccination',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='rage.protocolevaccination'),
        ),
        migrations.AddField(
            model_name='postexposition',
            name='protocole_vaccination',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='rage.protocolevaccination'),
        ),
        migrations.CreateModel(
            name='ObservationPostVaccination',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('heure_debut', models.DateTimeField()),
                ('heure_fin', models.DateTimeField()),
                ('est_terminee', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('vaccination', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='observation', to='rage.vaccination')),
            ],
        ),
        migrations.CreateModel(
            name='MAPI',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titre', models.CharField(blank=True, max_length=255, null=True)),
                ('date_apparition', models.DateTimeField(help_text="Date d'apparition des symptômes")),
                ('description', models.TextField(help_text='Description des symptômes observés')),
                ('gravite', models.CharField(choices=[('léger', 'Léger'), ('modéré', 'Modéré'), ('sévère', 'Sévère')], help_text='Gravité des symptômes', max_length=10)),
                ('traitement_administre', models.TextField(blank=True, help_text='Traitement administré au patient', null=True)),
                ('evolution', models.CharField(choices=[('guéri', 'Guéri'), ('en observation', 'En observation'), ('complications', 'Complications')], default='en observation', help_text='Évolution de la maladie', max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mapi', to='rage.patient')),
                ('vaccination', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mapi', to='rage.vaccination')),
            ],
            options={
                'verbose_name': 'MAPI (Maladie Post Injection)',
                'verbose_name_plural': 'MAPI (Maladies Post Injection)',
                'ordering': ['-date_apparition'],
            },
        ),
        migrations.AddField(
            model_name='lotvaccin',
            name='vaccin',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lotsvaccin', to='rage.vaccins'),
        ),
        migrations.CreateModel(
            name='InjectionImmunoglobuline',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_injection', models.DateTimeField(default=django.utils.timezone.now)),
                ('refus_injection', models.BooleanField(default=False, help_text="Le patient a-t-il refusé l'injection ?")),
                ('motif_refus', models.TextField(blank=True, help_text='Motif du refus (si refusé)', null=True)),
                ('type_produit', models.CharField(blank=True, max_length=100, null=True)),
                ('dose_ui', models.DecimalField(blank=True, decimal_places=2, help_text='Volume injecté en Unite International', max_digits=7, null=True)),
                ('dose_a_injecter', models.DecimalField(blank=True, decimal_places=2, help_text='Dose à prescrire en UI ', max_digits=7, null=True)),
                ('voie_injection', models.CharField(blank=True, choices=[('IM', 'Intramusculaire'), ('ID', 'Intradermique'), ('SC', 'Sous-cutanée')], max_length=10, null=True)),
                ('site_injection', models.TextField(blank=True, help_text="Sites anatomiques d'injection (ex: bras gauche, cuisse droite...)", null=True)),
                ('numero_lot', models.CharField(blank=True, max_length=100, null=True)),
                ('date_peremption', models.DateField(blank=True, null=True)),
                ('laboratoire_fabricant', models.CharField(blank=True, max_length=100, null=True)),
                ('commentaire', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='patients_immuno', to='rage.patient')),
            ],
            options={
                'ordering': ['-date_injection'],
            },
        ),
        migrations.CreateModel(
            name='HistoricalVaccins',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('nom', models.CharField(db_index=True, help_text='Nom du vaccin', max_length=255)),
                ('nbr_dose', models.PositiveIntegerField(blank=True, db_index=True, help_text='Nombre de dose recquis', null=True)),
                ('unite', models.CharField(choices=[('ml', 'Millilitres'), ('dose', 'Doses'), ('flacon', 'Flacons')], help_text='Unité de mesure', max_length=10)),
                ('prix', models.PositiveIntegerField(blank=True, help_text='Quantité en stock', null=True)),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, help_text='Ajouté par', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Vaccin',
                'verbose_name_plural': 'historical Vaccins',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalVaccination',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('date_prevue', models.DateField()),
                ('date_effective', models.DateTimeField(blank=True, null=True)),
                ('dose_ml', models.FloatField()),
                ('dose_numero', models.IntegerField(help_text='Numéro de la dose dans le protocole')),
                ('nombre_dose', models.IntegerField()),
                ('voie_injection', models.CharField(choices=[('ID', 'Intradermique')], max_length=5)),
                ('lieu', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('lot', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='rage.lotvaccin')),
                ('patient', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='rage.patient')),
                ('protocole', models.ForeignKey(blank=True, db_constraint=False, max_length=255, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='rage.protocolevaccination')),
                ('vaccin', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='rage.vaccins')),
            ],
            options={
                'verbose_name': 'historical vaccination',
                'verbose_name_plural': 'historical vaccinations',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalRendezVousVaccination',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('date_rendez_vous', models.DateField(db_index=True, help_text='Date prévue du rendez-vous')),
                ('dose_numero', models.IntegerField(db_index=True, help_text='Numéro de la dose dans le protocole')),
                ('ordre_rdv', models.IntegerField(blank=True, db_index=True, help_text='Numéro d’ordre du RDV pour ce patient', null=True)),
                ('est_effectue', models.BooleanField(db_index=True, default=False, help_text='Le vaccin a-t-il été administré ?')),
                ('statut_rdv', models.CharField(blank=True, choices=[('Passé', 'Passé'), ("Aujourd'hui", "Aujourd'hui"), ('À venir', 'À venir')], max_length=100, null=True)),
                ('created_at', models.DateTimeField(blank=True, db_index=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='rage.patient')),
                ('postexposition', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='rage.postexposition')),
                ('preexposition', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='rage.preexposition')),
                ('protocole', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='rage.protocolevaccination')),
            ],
            options={
                'verbose_name': 'historical Rendez-vous Vaccination',
                'verbose_name_plural': 'historical Rendez-vous Vaccinations',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalProtocoleVaccination',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('nom', models.CharField(blank=True, help_text='Nom du Protocole', max_length=255, null=True)),
                ('duree', models.IntegerField(blank=True, help_text='Durée du protocole en jours', null=True)),
                ('intervale_visite1_2', models.CharField(blank=True, help_text='Intervalle entre la premiere visite et la seconde visite (ex: 3Jours)', max_length=255, null=True)),
                ('intervale_visite2_3', models.CharField(blank=True, help_text='Intervalle entre la seconde visite et la troisiemme visite (ex: 4Jours)', max_length=255, null=True)),
                ('intervale_visite3_4', models.CharField(blank=True, help_text='Intervalle entre la troisiemme visite et la quatrieme visite (ex: 7Jours)', max_length=255, null=True)),
                ('intervale_visite4_5', models.CharField(blank=True, help_text='Intervalle entre la quatrieme visite et la cinquieme  visite (ex: 14Jours)', max_length=255, null=True)),
                ('nombre_visite', models.IntegerField(blank=True, help_text='Le nombre maximal de visite ', null=True)),
                ('nombre_doses', models.IntegerField(blank=True, help_text='Nombre total de doses', null=True)),
                ('nbr_dose_par_rdv', models.IntegerField(blank=True, help_text='Nombre de dose par', null=True)),
                ('volume_doses', models.DecimalField(blank=True, decimal_places=2, help_text='le volume par dose en ml', max_digits=5, null=True)),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('technique', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='rage.technique')),
                ('type', models.ForeignKey(blank=True, db_constraint=False, help_text='Type de protocole', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='rage.typeprotocole')),
            ],
            options={
                'verbose_name': 'historical Protocole de Vaccination',
                'verbose_name_plural': 'historical Protocoles de Vaccination',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalPreexposition',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('codeexpo', models.CharField(blank=True, db_index=True, max_length=255, null=True)),
                ('voyage', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, default='Non', max_length=3)),
                ('mise_a_jour', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, default='Non', max_length=3)),
                ('protection_rage', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, default='Non', max_length=3)),
                ('chien_voisin', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, default='Non', max_length=3)),
                ('chiens_errants', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, default='Non', max_length=3)),
                ('autre', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, default='Non', max_length=3)),
                ('autre_motif', models.CharField(blank=True, db_index=True, null=True)),
                ('tele', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, default='Non', max_length=3)),
                ('radio', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, default='Non', max_length=3)),
                ('sensibilisation', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], default='Non', max_length=3)),
                ('proche', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], default='Non', max_length=3)),
                ('presse', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], default='Non', max_length=3)),
                ('passage_car', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], default='Non', max_length=3)),
                ('diff_canal', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], default='Non', max_length=3)),
                ('canal_infos', models.TextField(blank=True, null=True)),
                ('aime_animaux', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], default='Non', max_length=3)),
                ('type_animal_aime', models.CharField(blank=True, choices=[('Chien', 'Chien'), ('Chat', 'Chat'), ('Singe', 'Singe'), ('Autre', 'Autre')], max_length=255, null=True)),
                ('conduite_animal_mordeur', models.CharField(blank=True, choices=[('Abattage', 'Abattage'), ('Surveillance vétérinaire', 'Surveillance vétérinaire'), ('Ne rien faire', 'Ne rien faire'), ('Autre', 'Autre')], max_length=255, null=True)),
                ('connait_protocole_var', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], default='Non', max_length=3)),
                ('dernier_var_animal_type', models.CharField(blank=True, max_length=255, null=True)),
                ('dernier_var_animal_date', models.DateField(blank=True, null=True)),
                ('mesures_elimination_rage', models.CharField(blank=True, null=True)),
                ('appreciation_cout_var', models.CharField(blank=True, choices=[('Elevé', 'Elevé'), ('Acceptable', 'Acceptable'), ('Pas à la portée de tous', 'Pas à la portée de tous'), ('Moins couteux', 'Moins couteux')], max_length=255, null=True)),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('fin_protocole', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], default='Non', max_length=3, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('client', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='rage.patient')),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('protocole_vaccination', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='rage.protocolevaccination')),
            ],
            options={
                'verbose_name': 'historical preexposition',
                'verbose_name_plural': 'historical preexpositions',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalPostExposition',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('date_exposition', models.DateField(db_index=True)),
                ('lieu_exposition', models.CharField(blank=True, db_index=True, max_length=255, null=True)),
                ('exposition_quartier', models.CharField(blank=True, max_length=255, null=True)),
                ('circonstance', models.CharField(blank=True, choices=[('Attaque provoquée', 'Attaque provoquée'), ('Agression', 'Agression'), ('Contact patient suspect/positif de rage ', 'Contact patient suspect/positif de rage')], max_length=255, null=True)),
                ('attaque_provoquee', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], max_length=10, null=True)),
                ('agression', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], max_length=10, null=True)),
                ('attaque_collective', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], max_length=10)),
                ('professionnel', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], max_length=10)),
                ('type_professionnel', models.CharField(blank=True, choices=[('Manipulation / Soins', 'Manipulation / Soins'), ('Laboratoire', 'Laboratoire')], max_length=50, null=True)),
                ('morsure', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10)),
                ('griffure', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10)),
                ('lechage_saine', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10, null=True)),
                ('lechage_lesee', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10)),
                ('contactanimalpositif', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10)),
                ('contactpatientpositif', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10)),
                ('autre', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10)),
                ('autre_nature_exposition', models.CharField(blank=True, db_index=True, max_length=10, null=True)),
                ('tete_cou', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10)),
                ('preciser_tetecou', models.JSONField(blank=True, null=True)),
                ('membre_superieur', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10)),
                ('preciser_membre_sup', models.JSONField(blank=True, null=True)),
                ('tronc', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10)),
                ('preciser_tronc', models.JSONField(blank=True, null=True)),
                ('organes_genitaux_externes', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10)),
                ('membre_inferieur', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10)),
                ('preciser_membre_inf', models.JSONField(blank=True, null=True)),
                ('saignement_immediat', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10)),
                ('vetements_presents', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10)),
                ('dechires', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10, null=True)),
                ('siege_exposition', models.TextField(blank=True, null=True)),
                ('vetements_dechires', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10, null=True)),
                ('nbrlesions', models.CharField(blank=True, choices=[('1', '1'), ('2', '2'), ('3', '3'), ('4', '4'), ('5', '5'), ('6', '6'), ('7', '7'), ('8', '8'), ('9', '9'), ('10', '10'), ('11-15', '11-15'), ('16-20', '16-20'), ('21 et plus', '21 et plus ')], max_length=300, null=True)),
                ('espece', models.CharField(blank=True, choices=[('Chien', 'Chien'), ('Chat', 'Chat'), ('Singe', 'Singe'), ('Chauve-souris', 'Chauve-souris'), ('Autre', 'Autre')], max_length=50, null=True)),
                ('autre_animal', models.CharField(blank=True, max_length=255, null=True)),
                ('domestic', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10, null=True)),
                ('connais_proprio', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10, null=True)),
                ('nom_proprietaire', models.CharField(blank=True, max_length=255, null=True)),
                ('contact_proprietaire', models.CharField(blank=True, max_length=255, null=True)),
                ('info_proprietaire', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], max_length=50, null=True)),
                ('retour_info_proprietaire', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], max_length=50, null=True)),
                ('avis', models.BooleanField(default=False)),
                ('convocation', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10, null=True)),
                ('prophylaxie', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10, null=True)),
                ('correctement_vaccine', models.CharField(blank=True, choices=[('Animal non vacciné', 'Animal non vacciné'), ('Statut vaccinal Inconnu', 'Statut vaccinal Inconnu'), ('Non à jour', 'Non à jour'), ('Oui', 'Correctement vacciné')], db_index=True, max_length=50, null=True)),
                ('non_vaccine', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10, null=True)),
                ('nonajours', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10, null=True)),
                ('vacinconnu', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10, null=True)),
                ('carnet_Vaccin', models.TextField(blank=True, max_length=100, null=True)),
                ('connu', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10, null=True)),
                ('disponible', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10, null=True)),
                ('errant', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10, null=True)),
                ('disparu', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10, null=True)),
                ('mort', models.CharField(blank=True, choices=[('Carcasse disponible', 'Carcasse disponible'), ('Carcasse non disponible', 'Carcasse non disponible'), ('Non', 'Non')], db_index=True, max_length=30, null=True)),
                ('abatu', models.CharField(blank=True, choices=[('Carcasse disponible', 'Carcasse disponible'), ('Carcasse non disponible', 'Carcasse non disponible'), ('Non', 'Non')], db_index=True, max_length=30, null=True)),
                ('autre_statut', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10)),
                ('autre_statut_precis', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('date_derniere_vaccination', models.DateField(blank=True, null=True)),
                ('gravite_oms', models.CharField(blank=True, choices=[('I', 'I'), ('II', 'II'), ('III', 'III')], max_length=10, null=True)),
                ('surveillance_veterinaire', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10, null=True)),
                ('certificat', models.CharField(blank=True, max_length=50, null=True)),
                ('piece_jointe', models.TextField(blank=True, max_length=100, null=True)),
                ('date_etablissement', models.DateField(blank=True, null=True)),
                ('Date_depot_car', models.DateField(blank=True, null=True)),
                ('Decision_de_poursuite_tar', models.CharField(blank=True, max_length=50, null=True)),
                ('Decision_d_arrete_tar', models.CharField(blank=True, max_length=50, null=True)),
                ('prelevement_animal', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10, null=True)),
                ('diagnostic_laboratoire', models.CharField(blank=True, choices=[('Positif', 'Positif'), ('Negatif', 'Négatif')], max_length=50, null=True)),
                ('date_diagnostic', models.DateField(blank=True, null=True)),
                ('antecedents_medicaux', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10)),
                ('details_antecedents', models.JSONField(blank=True, null=True)),
                ('probleme_coagulation', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10)),
                ('details_problemes', models.JSONField(blank=True, null=True)),
                ('immunodepression', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10)),
                ('details_immo', models.JSONField(blank=True, null=True)),
                ('grossesse', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10, null=True)),
                ('details_grosesse', models.CharField(blank=True, choices=[('1', 'Semaine 1'), ('2', 'Semaine 2'), ('3', 'Semaine 3'), ('4', 'Semaine 4'), ('5', 'Semaine 5'), ('6', 'Semaine 6'), ('7', 'Semaine 7'), ('8', 'Semaine 8'), ('9', 'Semaine 9'), ('10', 'Semaine 10'), ('11', 'Semaine 11'), ('12', 'Semaine 12'), ('13', 'Semaine 13'), ('14', 'Semaine 14'), ('15', 'Semaine 15'), ('16', 'Semaine 16'), ('17', 'Semaine 17'), ('18', 'Semaine 18'), ('19', 'Semaine 19'), ('20', 'Semaine 20'), ('21', 'Semaine 21'), ('22', 'Semaine 22'), ('23', 'Semaine 23'), ('24', 'Semaine 24'), ('25', 'Semaine 25'), ('26', 'Semaine 26'), ('27', 'Semaine 27'), ('28', 'Semaine 28'), ('29', 'Semaine 29'), ('30', 'Semaine 30'), ('31', 'Semaine 31'), ('32', 'Semaine 32'), ('33', 'Semaine 33'), ('34', 'Semaine 34'), ('35', 'Semaine 35'), ('36', 'Semaine 36'), ('37', 'Semaine 37'), ('38', 'Semaine 38'), ('39', 'Semaine 39'), ('40', 'Semaine 40'), ('41', 'Semaine 41')], db_index=True, max_length=10, null=True)),
                ('allergies', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10)),
                ('details_allergies', models.JSONField(blank=True, null=True)),
                ('traitements_en_cours', models.CharField(choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10)),
                ('details_traitements', models.TextField(blank=True, null=True)),
                ('vat_dernier_injection', models.DateField(blank=True, null=True)),
                ('vat_rappel', models.DateField(blank=True, null=True)),
                ('vat_lot', models.CharField(blank=True, max_length=255, null=True)),
                ('vaccin_antirabique', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10, null=True)),
                ('carnet_vaccinal', models.TextField(blank=True, max_length=100, null=True)),
                ('carnet_vaccinal_verso', models.TextField(blank=True, max_length=100, null=True)),
                ('lavage_plaies', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10, null=True)),
                ('desinfection_plaies', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10, null=True)),
                ('delai_apres_exposition', models.CharField(blank=True, choices=[('0', "moin d'une heure"), ('1-2', '1 -2 heure'), ('3-4', '3-4 heure'), ('5-6', '5-6 heure')], max_length=50, null=True)),
                ('delai_apres_desinfection', models.CharField(blank=True, choices=[('0', "moin d'une heure"), ('1-2', '1 -2 heure'), ('3-4', '3-4 heure'), ('5-6', '5-6 heure')], max_length=50, null=True)),
                ('produits_utilises', models.CharField(blank=True, max_length=50, null=True)),
                ('sutures', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10, null=True)),
                ('serum_antitetanique', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10, null=True)),
                ('antibiotiques', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10, null=True)),
                ('details_antibiotiques', models.TextField(blank=True, null=True)),
                ('delai_traitement', models.TextField(blank=True, null=True)),
                ('immunoglobulines', models.TextField(blank=True, null=True)),
                ('details_vaccination', models.TextField(blank=True, null=True)),
                ('serologie', models.BooleanField(default=False)),
                ('details_serologie', models.TextField(blank=True, null=True)),
                ('issue', models.CharField(blank=True, choices=[('Perdu de vue', 'Perdu de vue'), ('Arrêté', 'Arrêté'), ('Terminé', 'Terminé')], max_length=50, null=True)),
                ('observance', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, max_length=10, null=True)),
                ('evolution_patient', models.CharField(blank=True, choices=[('Vivant', 'Vivant'), ('Décédé', 'Décédé'), ('Non précisé', 'Non précisé')], max_length=50, null=True)),
                ('cause_deces', models.TextField(blank=True, null=True)),
                ('date_deces', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('temps_saisie', models.PositiveIntegerField(blank=True, help_text='Temps de saisie du formulaire (en secondes)', null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('client', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='rage.patient')),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('exposition_commune', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='rage.commune')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('protocole_vaccination', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='rage.protocolevaccination')),
            ],
            options={
                'verbose_name': 'historical post exposition',
                'verbose_name_plural': 'historical post expositions',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalPatient',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('code_patient', models.CharField(blank=True, db_index=True, editable=False, max_length=225)),
                ('mpi_upi', models.UUIDField(blank=True, db_index=True, null=True)),
                ('nom', models.CharField(db_index=True, max_length=225)),
                ('prenoms', models.CharField(db_index=True, max_length=225)),
                ('contact', phonenumber_field.modelfields.PhoneNumberField(blank=True, db_index=True, max_length=128, null=True, region='CI')),
                ('date_naissance', models.DateField(db_index=True)),
                ('sexe', models.CharField(choices=[('Masculin', 'Masculin'), ('Feminin', 'Féminin')], max_length=10)),
                ('num_cmu', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('cni_num', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('cni_nni', models.CharField(blank=True, db_index=True, max_length=100, null=True)),
                ('secteur_activite', models.CharField(blank=True, max_length=200, null=True)),
                ('niveau_etude', models.CharField(blank=True, choices=[('Non scolarisé', 'Non scolarisé'), ('Préscolaire', 'Préscolaire'), ('Primaire', 'Primaire'), ('Secondaire', 'Secondaire'), ('Supérieur', 'Supérieur')], max_length=500, null=True)),
                ('quartier', models.CharField(blank=True, max_length=255, null=True)),
                ('village', models.CharField(blank=True, max_length=255, null=True)),
                ('poids', models.PositiveIntegerField(blank=True, help_text='Poids du patient (1 à 250 kg)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(250)])),
                ('proprietaire_animal', models.CharField(blank=True, choices=[('Oui', 'Oui'), ('Non', 'Non')], db_index=True, default='Non', max_length=10, null=True)),
                ('typeanimal', models.CharField(blank=True, choices=[('Singe', 'Singe'), ('Chien', 'Chien'), ('Chat', 'Chat'), ('Autre', 'Autre')], max_length=255, null=True)),
                ('autretypeanimal', models.CharField(blank=True, max_length=255, null=True)),
                ('patient_mineur', models.BooleanField(default=False)),
                ('accompagnateur', models.CharField(blank=True, max_length=255, null=True)),
                ('accompagnateurcontact', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region='CI')),
                ('accompagnateur_adresse', models.CharField(blank=True, max_length=255, null=True)),
                ('accompagnateur_nature', models.CharField(blank=True, choices=[('Pere', 'Père'), ('Mere', 'Mère'), ('Oncle', 'Oncle'), ('Tante', 'Tante'), ('Frere', 'Frère'), ('Soeur', 'Soeur'), ('Cousin', 'Cousin'), ('Cousine', 'Cousine'), ('Connaissance du quartier', 'Connaissance du quartier'), ('Voisin du quartier', 'Voisin du quartier'), ('Propriétaire animal', 'Propriétaire animal')], max_length=255, null=True)),
                ('accompagnateur_niveau_etude', models.CharField(blank=True, choices=[('Non scolarisé', 'Non scolarisé'), ('Préscolaire', 'Préscolaire'), ('Primaire', 'Primaire'), ('Secondaire', 'Secondaire'), ('Supérieur', 'Supérieur')], max_length=255, null=True)),
                ('status', models.CharField(blank=True, choices=[('Admis', 'Admis'), ('Sorti', 'Sorti'), ('Transféré', 'Transféré'), ('Décédé', 'Décédé'), ('Sous observation', 'Sous observation'), ('Sous traitement', 'Sous traitement'), ('Chirurgie programmée', 'Chirurgie programmée'), ('En chirurgie', 'En chirurgie'), ('Récupération post-opératoire', 'Récupération post-opératoire'), ('USI', 'Unité de soins intensifs (USI)'), ('Urgence', 'Urgence'), ('Consultation externe', 'Consultation externe'), ('Réhabilitation', 'Réhabilitation'), ('En attente de diagnostic', 'En attente de diagnostic'), ('Traitement en cours', 'Traitement en cours'), ('Suivi programmé', 'Suivi programmé'), ('Consultation', 'Consultation'), ('Sortie en attente', 'Sortie en attente'), ('Isolement', 'Isolement'), ('Ambulantoire', 'Ambulantoire'), ('Aucun', 'Aucun')], default='Aucun', max_length=100, null=True)),
                ('gueris', models.BooleanField(default=False)),
                ('decede', models.BooleanField(default=False)),
                ('cause_deces', models.TextField(blank=True, null=True)),
                ('date_deces', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('centre_ar', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='rage.centreantirabique')),
                ('commune', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='rage.commune')),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('district', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='rage.districtsanitaire')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical patient',
                'verbose_name_plural': 'historical patients',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalMAPI',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('titre', models.CharField(blank=True, max_length=255, null=True)),
                ('date_apparition', models.DateTimeField(help_text="Date d'apparition des symptômes")),
                ('description', models.TextField(help_text='Description des symptômes observés')),
                ('gravite', models.CharField(choices=[('léger', 'Léger'), ('modéré', 'Modéré'), ('sévère', 'Sévère')], help_text='Gravité des symptômes', max_length=10)),
                ('traitement_administre', models.TextField(blank=True, help_text='Traitement administré au patient', null=True)),
                ('evolution', models.CharField(choices=[('guéri', 'Guéri'), ('en observation', 'En observation'), ('complications', 'Complications')], default='en observation', help_text='Évolution de la maladie', max_length=255)),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='rage.patient')),
                ('vaccination', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='rage.vaccination')),
            ],
            options={
                'verbose_name': 'historical MAPI (Maladie Post Injection)',
                'verbose_name_plural': 'historical MAPI (Maladies Post Injection)',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalEmployeeProfile',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('gender', models.CharField(blank=True, choices=[('M', 'Masculin'), ('F', 'Féminin')], max_length=100, null=True)),
                ('situation_matrimoniale', models.CharField(blank=True, choices=[('Célibataire', 'Célibataire'), ('Marié(e)', 'Marié(e)'), ('Divorcé(e)', 'Divorcé(e)'), ('Veuf(ve)', 'Veuf(ve)')], max_length=100, null=True)),
                ('phone', models.CharField(blank=True, default='+22507070707', max_length=20, null=True)),
                ('birthdate', models.DateField(blank=True, null=True)),
                ('job_title', models.CharField(blank=True, max_length=50, null=True, verbose_name='Titre du poste')),
                ('slug', models.SlugField(blank=True, editable=False, help_text='Slug field', null=True, verbose_name='Slug')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('district', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='rage.districtsanitaire', verbose_name='District Sanitaire')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('service', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='rage.centreantirabique', verbose_name='Service Sanitaire')),
                ('user', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical employee profile',
                'verbose_name_plural': 'historical employee profiles',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalEchantillon',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('code_echantillon', models.CharField(blank=True, db_index=True, max_length=12, null=True)),
                ('date_collect', models.DateTimeField(blank=True, null=True)),
                ('site_collect', models.CharField(blank=True, max_length=500, null=True)),
                ('status_echantillons', models.CharField(blank=True, max_length=10, null=True)),
                ('resultat', models.BooleanField(default=False)),
                ('linked', models.BooleanField(default=False)),
                ('used', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('agent_collect', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('maladie', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='rage.epidemie')),
                ('mode_preleve', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='rage.prelevemode')),
                ('patient', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='rage.patient')),
            ],
            options={
                'verbose_name': 'historical echantillon',
                'verbose_name_plural': 'historical echantillons',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalDossierMedical',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('antecedents_medicaux', models.TextField(blank=True, null=True)),
                ('coagulation', models.BooleanField(default=False)),
                ('immunodepression', models.BooleanField(default=False)),
                ('grossesse', models.BooleanField(default=False)),
                ('terme_grossesse', models.IntegerField(blank=True, null=True)),
                ('allergies', models.TextField(blank=True, null=True)),
                ('traitements_en_cours', models.TextField(blank=True, null=True)),
                ('vaccin_antirabique_precedent', models.BooleanField(default=False)),
                ('carnet_vaccination', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='rage.patient')),
            ],
            options={
                'verbose_name': 'historical dossier medical',
                'verbose_name_plural': 'historical dossier medicals',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalAnimal',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('espece', models.CharField(choices=[('Chien', 'Chien'), ('Chat', 'Chat'), ('Singe', 'Singe'), ('Autre', 'Autre')], max_length=20)),
                ('precisions', models.CharField(blank=True, max_length=255, null=True)),
                ('domestique', models.BooleanField()),
                ('statut', models.CharField(choices=[('Connu', 'Connu'), ('Disponible', 'Disponible'), ('Disparu', 'Disparu'), ('Mort', 'Mort'), ('Abattu', 'Abattu'), ('Errant', 'Errant')], max_length=20)),
                ('proprietaire_nom', models.CharField(blank=True, max_length=255, null=True)),
                ('proprietaire_contact', models.CharField(blank=True, max_length=255, null=True)),
                ('statut_vaccinal', models.CharField(blank=True, max_length=50, null=True)),
                ('date_derniere_vaccination', models.DateField(blank=True, null=True)),
                ('gueris', models.BooleanField(default=False)),
                ('decede', models.BooleanField(default=False)),
                ('cause_deces', models.TextField(blank=True, null=True)),
                ('date_deces', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('prorietaire', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='rage.patient')),
            ],
            options={
                'verbose_name': 'historical animal',
                'verbose_name_plural': 'historical animals',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HealthRegion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=100, unique=True)),
                ('poles', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='regions', to='rage.polesregionaux')),
            ],
        ),
        migrations.CreateModel(
            name='Facture',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('montant_total', models.DecimalField(decimal_places=2, help_text='Montant total de la facture', max_digits=10)),
                ('montant_paye', models.DecimalField(decimal_places=2, default=0.0, help_text='Montant déjà payé', max_digits=10)),
                ('reste_a_payer', models.DecimalField(decimal_places=2, default=0.0, help_text='Montant restant', max_digits=10)),
                ('statut_paiement', models.CharField(choices=[('non_payee', 'Non Payée'), ('partiellement_payee', 'Partiellement Payée'), ('payee', 'Payée')], default='non_payee', help_text='Statut du paiement', max_length=20)),
                ('date_facture', models.DateTimeField(auto_now_add=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='Créé par', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='factures', to='rage.patient')),
                ('protocole', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='protocolevacc', to='rage.protocolevaccination')),
                ('vaccination', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='factures', to='rage.vaccination')),
            ],
            options={
                'verbose_name': 'Facture',
                'verbose_name_plural': 'Factures',
                'ordering': ['-date_facture'],
            },
        ),
        migrations.AddField(
            model_name='epidemie',
            name='symptomes',
            field=models.ManyToManyField(related_name='épidémies', to='rage.symptom'),
        ),
        migrations.CreateModel(
            name='EmployeeProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gender', models.CharField(blank=True, choices=[('M', 'Masculin'), ('F', 'Féminin')], max_length=100, null=True)),
                ('situation_matrimoniale', models.CharField(blank=True, choices=[('Célibataire', 'Célibataire'), ('Marié(e)', 'Marié(e)'), ('Divorcé(e)', 'Divorcé(e)'), ('Veuf(ve)', 'Veuf(ve)')], max_length=100, null=True)),
                ('phone', models.CharField(blank=True, default='+22507070707', max_length=20, null=True)),
                ('birthdate', models.DateField(blank=True, null=True)),
                ('job_title', models.CharField(blank=True, max_length=50, null=True, verbose_name='Titre du poste')),
                ('slug', models.SlugField(blank=True, editable=False, help_text='Slug field', null=True, unique=True, verbose_name='Slug')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('district', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='employees', to='rage.districtsanitaire', verbose_name='District Sanitaire')),
                ('service', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='employees', to='rage.centreantirabique', verbose_name='Service Sanitaire')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='employee', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'permissions': (('access_all', 'Peut accéder à toutes les données'), ('access_region', 'Peut accéder aux données régionales'), ('access_district', 'Peut accéder aux données de district'), ('can_assign_roles', 'Peut assigner des rôles aux employés')),
            },
        ),
        migrations.CreateModel(
            name='Echantillon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code_echantillon', models.CharField(blank=True, max_length=12, null=True, unique=True)),
                ('date_collect', models.DateTimeField(blank=True, null=True)),
                ('site_collect', models.CharField(blank=True, max_length=500, null=True)),
                ('status_echantillons', models.CharField(blank=True, max_length=10, null=True)),
                ('resultat', models.BooleanField(default=False)),
                ('linked', models.BooleanField(default=False)),
                ('used', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now=True, null=True)),
                ('agent_collect', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('maladie', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='rage.epidemie')),
                ('mode_preleve', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='rage.prelevemode')),
                ('patient', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='echantillons', to='rage.patient')),
            ],
        ),
        migrations.CreateModel(
            name='DossierMedical',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('antecedents_medicaux', models.TextField(blank=True, null=True)),
                ('coagulation', models.BooleanField(default=False)),
                ('immunodepression', models.BooleanField(default=False)),
                ('grossesse', models.BooleanField(default=False)),
                ('terme_grossesse', models.IntegerField(blank=True, null=True)),
                ('allergies', models.TextField(blank=True, null=True)),
                ('traitements_en_cours', models.TextField(blank=True, null=True)),
                ('vaccin_antirabique_precedent', models.BooleanField(default=False)),
                ('carnet_vaccination', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('patient', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='rage.patient')),
            ],
        ),
        migrations.AddField(
            model_name='districtsanitaire',
            name='region',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='districts', to='rage.healthregion'),
        ),
        migrations.AddField(
            model_name='commune',
            name='district',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='rage.districtsanitaire'),
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(srid=4326)),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rage.healthregion')),
            ],
        ),
        migrations.AddField(
            model_name='centreantirabique',
            name='district',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='centres', to='rage.districtsanitaire'),
        ),
        migrations.CreateModel(
            name='Caisse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('montant', models.DecimalField(decimal_places=2, help_text='Montant payé', max_digits=10)),
                ('mode_paiement', models.CharField(choices=[('espece', 'Espèces'), ('carte', 'Carte Bancaire'), ('mobile_money', 'Mobile Money'), ('cheque', 'Chèque')], help_text='Mode de paiement utilisé', max_length=20)),
                ('date_paiement', models.DateTimeField(default=django.utils.timezone.now, help_text='Date du paiement')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='Paiement enregistré par', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('facture', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='paiements', to='rage.facture')),
            ],
            options={
                'verbose_name': 'Paiement',
                'verbose_name_plural': 'Paiements',
                'ordering': ['-date_paiement'],
            },
        ),
        migrations.CreateModel(
            name='Animal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('espece', models.CharField(choices=[('Chien', 'Chien'), ('Chat', 'Chat'), ('Singe', 'Singe'), ('Autre', 'Autre')], max_length=20)),
                ('precisions', models.CharField(blank=True, max_length=255, null=True)),
                ('domestique', models.BooleanField()),
                ('statut', models.CharField(choices=[('Connu', 'Connu'), ('Disponible', 'Disponible'), ('Disparu', 'Disparu'), ('Mort', 'Mort'), ('Abattu', 'Abattu'), ('Errant', 'Errant')], max_length=20)),
                ('proprietaire_nom', models.CharField(blank=True, max_length=255, null=True)),
                ('proprietaire_contact', models.CharField(blank=True, max_length=255, null=True)),
                ('statut_vaccinal', models.CharField(blank=True, max_length=50, null=True)),
                ('date_derniere_vaccination', models.DateField(blank=True, null=True)),
                ('gueris', models.BooleanField(default=False)),
                ('decede', models.BooleanField(default=False)),
                ('cause_deces', models.TextField(blank=True, null=True)),
                ('date_deces', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('prorietaire', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rage.patient')),
            ],
        ),
        migrations.AddField(
            model_name='employeeuser',
            name='centre',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='rage.centreantirabique'),
        ),
        migrations.AddField(
            model_name='employeeuser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='employeeuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
